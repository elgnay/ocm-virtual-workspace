//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"open-cluster-management.io/api/work/v1.AppliedManifestResourceMeta":       schema_open_cluster_managementio_api_work_v1_AppliedManifestResourceMeta(ref),
		"open-cluster-management.io/api/work/v1.AppliedManifestWork":               schema_open_cluster_managementio_api_work_v1_AppliedManifestWork(ref),
		"open-cluster-management.io/api/work/v1.AppliedManifestWorkList":           schema_open_cluster_managementio_api_work_v1_AppliedManifestWorkList(ref),
		"open-cluster-management.io/api/work/v1.AppliedManifestWorkSpec":           schema_open_cluster_managementio_api_work_v1_AppliedManifestWorkSpec(ref),
		"open-cluster-management.io/api/work/v1.AppliedManifestWorkStatus":         schema_open_cluster_managementio_api_work_v1_AppliedManifestWorkStatus(ref),
		"open-cluster-management.io/api/work/v1.DeleteOption":                      schema_open_cluster_managementio_api_work_v1_DeleteOption(ref),
		"open-cluster-management.io/api/work/v1.FeedbackRule":                      schema_open_cluster_managementio_api_work_v1_FeedbackRule(ref),
		"open-cluster-management.io/api/work/v1.FeedbackValue":                     schema_open_cluster_managementio_api_work_v1_FeedbackValue(ref),
		"open-cluster-management.io/api/work/v1.FieldValue":                        schema_open_cluster_managementio_api_work_v1_FieldValue(ref),
		"open-cluster-management.io/api/work/v1.JsonPath":                          schema_open_cluster_managementio_api_work_v1_JsonPath(ref),
		"open-cluster-management.io/api/work/v1.Manifest":                          schema_open_cluster_managementio_api_work_v1_Manifest(ref),
		"open-cluster-management.io/api/work/v1.ManifestCondition":                 schema_open_cluster_managementio_api_work_v1_ManifestCondition(ref),
		"open-cluster-management.io/api/work/v1.ManifestConfigOption":              schema_open_cluster_managementio_api_work_v1_ManifestConfigOption(ref),
		"open-cluster-management.io/api/work/v1.ManifestResourceMeta":              schema_open_cluster_managementio_api_work_v1_ManifestResourceMeta(ref),
		"open-cluster-management.io/api/work/v1.ManifestResourceStatus":            schema_open_cluster_managementio_api_work_v1_ManifestResourceStatus(ref),
		"open-cluster-management.io/api/work/v1.ManifestWork":                      schema_open_cluster_managementio_api_work_v1_ManifestWork(ref),
		"open-cluster-management.io/api/work/v1.ManifestWorkExecutor":              schema_open_cluster_managementio_api_work_v1_ManifestWorkExecutor(ref),
		"open-cluster-management.io/api/work/v1.ManifestWorkExecutorSubject":       schema_open_cluster_managementio_api_work_v1_ManifestWorkExecutorSubject(ref),
		"open-cluster-management.io/api/work/v1.ManifestWorkList":                  schema_open_cluster_managementio_api_work_v1_ManifestWorkList(ref),
		"open-cluster-management.io/api/work/v1.ManifestWorkSpec":                  schema_open_cluster_managementio_api_work_v1_ManifestWorkSpec(ref),
		"open-cluster-management.io/api/work/v1.ManifestWorkStatus":                schema_open_cluster_managementio_api_work_v1_ManifestWorkStatus(ref),
		"open-cluster-management.io/api/work/v1.ManifestWorkSubjectServiceAccount": schema_open_cluster_managementio_api_work_v1_ManifestWorkSubjectServiceAccount(ref),
		"open-cluster-management.io/api/work/v1.ManifestsTemplate":                 schema_open_cluster_managementio_api_work_v1_ManifestsTemplate(ref),
		"open-cluster-management.io/api/work/v1.OrphaningRule":                     schema_open_cluster_managementio_api_work_v1_OrphaningRule(ref),
		"open-cluster-management.io/api/work/v1.ResourceIdentifier":                schema_open_cluster_managementio_api_work_v1_ResourceIdentifier(ref),
		"open-cluster-management.io/api/work/v1.SelectivelyOrphan":                 schema_open_cluster_managementio_api_work_v1_SelectivelyOrphan(ref),
		"open-cluster-management.io/api/work/v1.ServerSideApplyConfig":             schema_open_cluster_managementio_api_work_v1_ServerSideApplyConfig(ref),
		"open-cluster-management.io/api/work/v1.StatusFeedbackResult":              schema_open_cluster_managementio_api_work_v1_StatusFeedbackResult(ref),
		"open-cluster-management.io/api/work/v1.UpdateStrategy":                    schema_open_cluster_managementio_api_work_v1_UpdateStrategy(ref),
	}
}

func schema_open_cluster_managementio_api_work_v1_AppliedManifestResourceMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AppliedManifestResourceMeta represents the group, version, resource, name and namespace of a resource. Since these resources have been created, they must have valid group, version, resource, namespace, and name.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "Group is the API Group of the Kubernetes resource, empty string indicates it is in core group.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource is the resource name of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the namespace of the Kubernetes resource, empty string indicates it is a cluster scoped resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the version of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID is set on successful deletion of the Kubernetes resource by controller. The resource might be still visible on the managed cluster after this field is set. It is not directly settable by a client.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"resource", "name", "version"},
			},
		},
	}
}

func schema_open_cluster_managementio_api_work_v1_AppliedManifestWork(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AppliedManifestWork represents an applied manifestwork on managed cluster that is placed on a managed cluster. An AppliedManifestWork links to a manifestwork on a hub recording resources deployed in the managed cluster. When the agent is removed from managed cluster, cluster-admin on managed cluster can delete appliedmanifestwork to remove resources deployed by the agent. The name of the appliedmanifestwork must be in the format of {hash of hub's first kube-apiserver url}-{manifestwork name}",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec represents the desired configuration of AppliedManifestWork.",
							Default:     map[string]interface{}{},
							Ref:         ref("open-cluster-management.io/api/work/v1.AppliedManifestWorkSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status represents the current status of AppliedManifestWork.",
							Default:     map[string]interface{}{},
							Ref:         ref("open-cluster-management.io/api/work/v1.AppliedManifestWorkStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "open-cluster-management.io/api/work/v1.AppliedManifestWorkSpec", "open-cluster-management.io/api/work/v1.AppliedManifestWorkStatus"},
	}
}

func schema_open_cluster_managementio_api_work_v1_AppliedManifestWorkList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AppliedManifestWorkList is a collection of appliedmanifestworks.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of appliedmanifestworks.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("open-cluster-management.io/api/work/v1.AppliedManifestWork"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "open-cluster-management.io/api/work/v1.AppliedManifestWork"},
	}
}

func schema_open_cluster_managementio_api_work_v1_AppliedManifestWorkSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AppliedManifestWorkSpec represents the desired configuration of AppliedManifestWork",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"hubHash": {
						SchemaProps: spec.SchemaProps{
							Description: "HubHash represents the hash of the first hub kube apiserver to identify which hub this AppliedManifestWork links to.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"manifestWorkName": {
						SchemaProps: spec.SchemaProps{
							Description: "ManifestWorkName represents the name of the related manifestwork on the hub.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"hubHash", "manifestWorkName"},
			},
		},
	}
}

func schema_open_cluster_managementio_api_work_v1_AppliedManifestWorkStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AppliedManifestWorkStatus represents the current status of AppliedManifestWork",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"appliedResources": {
						SchemaProps: spec.SchemaProps{
							Description: "AppliedResources represents a list of resources defined within the manifestwork that are applied. Only resources with valid GroupVersionResource, namespace, and name are suitable. An item in this slice is deleted when there is no mapped manifest in manifestwork.Spec or by finalizer. The resource relating to the item will also be removed from managed cluster. The deleted resource may still be present until the finalizers for that resource are finished. However, the resource will not be undeleted, so it can be removed from this list and eventual consistency is preserved.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("open-cluster-management.io/api/work/v1.AppliedManifestResourceMeta"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.AppliedManifestResourceMeta"},
	}
}

func schema_open_cluster_managementio_api_work_v1_DeleteOption(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"propagationPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "propagationPolicy can be Foreground, Orphan or SelectivelyOrphan SelectivelyOrphan should be rarely used.  It is provided for cases where particular resources is transfering ownership from one ManifestWork to another or another management unit. Setting this value will allow a flow like 1. create manifestwork/2 to manage foo 2. update manifestwork/1 to selectively orphan foo 3. remove foo from manifestwork/1 without impacting continuity because manifestwork/2 adopts it.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selectivelyOrphans": {
						SchemaProps: spec.SchemaProps{
							Description: "selectivelyOrphan represents a list of resources following orphan deletion stratecy",
							Ref:         ref("open-cluster-management.io/api/work/v1.SelectivelyOrphan"),
						},
					},
				},
				Required: []string{"propagationPolicy"},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.SelectivelyOrphan"},
	}
}

func schema_open_cluster_managementio_api_work_v1_FeedbackRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type defines the option of how status can be returned. It can be jsonPaths or wellKnownStatus. If the type is JSONPaths, user should specify the jsonPaths field If the type is WellKnownStatus, certain common fields of status defined by a rule only for types in in k8s.io/api and open-cluster-management/api will be reported, If these status fields do not exist, no values will be reported.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"jsonPaths": {
						SchemaProps: spec.SchemaProps{
							Description: "JsonPaths defines the json path under status field to be synced.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("open-cluster-management.io/api/work/v1.JsonPath"),
									},
								},
							},
						},
					},
				},
				Required: []string{"type"},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.JsonPath"},
	}
}

func schema_open_cluster_managementio_api_work_v1_FeedbackValue(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name represents the alias name for this field. It is the same as what is specified in StatuFeedbackRule in the spec.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fieldValue": {
						SchemaProps: spec.SchemaProps{
							Description: "Value is the value of the status field. The value of the status field can only be integer, string or boolean.",
							Default:     map[string]interface{}{},
							Ref:         ref("open-cluster-management.io/api/work/v1.FieldValue"),
						},
					},
				},
				Required: []string{"name", "fieldValue"},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.FieldValue"},
	}
}

func schema_open_cluster_managementio_api_work_v1_FieldValue(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FieldValue is the value of the status field. The value of the status field can only be integer, string or boolean.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type represents the type of the value, it can be integer, string or boolean.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"integer": {
						SchemaProps: spec.SchemaProps{
							Description: "Integer is the integer value when type is integer.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"string": {
						SchemaProps: spec.SchemaProps{
							Description: "String is the string value when when type is string.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"boolean": {
						SchemaProps: spec.SchemaProps{
							Description: "Boolean is bool value when type is boolean.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"type"},
			},
		},
	}
}

func schema_open_cluster_managementio_api_work_v1_JsonPath(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name represents the alias name for this field",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the version of the Kubernetes resource. If it is not specified, the resource with the semantically latest version is used to resolve the path.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path represents the json path of the field under status. The path must point to a field with single value in the type of integer, bool or string. If the path points to a non-existing field, no value will be returned. If the path points to a structure, map or slice, no value will be returned and the status conddition of StatusFeedBackSynced will be set as false. Ref to https://kubernetes.io/docs/reference/kubectl/jsonpath/ on how to write a jsonPath.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "path"},
			},
		},
	}
}

func schema_open_cluster_managementio_api_work_v1_Manifest(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Manifest represents a resource to be deployed on managed cluster.",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_open_cluster_managementio_api_work_v1_ManifestCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestCondition represents the conditions of the resources deployed on a managed cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"resourceMeta": {
						SchemaProps: spec.SchemaProps{
							Description: "ResourceMeta represents the group, version, kind, name and namespace of a resoure.",
							Default:     map[string]interface{}{},
							Ref:         ref("open-cluster-management.io/api/work/v1.ManifestResourceMeta"),
						},
					},
					"statusFeedback": {
						SchemaProps: spec.SchemaProps{
							Description: "StatusFeedback represents the values of the feild synced back defined in statusFeedbacks",
							Default:     map[string]interface{}{},
							Ref:         ref("open-cluster-management.io/api/work/v1.StatusFeedbackResult"),
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions represents the conditions of this resource on a managed cluster.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.Condition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"resourceMeta", "conditions"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Condition", "open-cluster-management.io/api/work/v1.ManifestResourceMeta", "open-cluster-management.io/api/work/v1.StatusFeedbackResult"},
	}
}

func schema_open_cluster_managementio_api_work_v1_ManifestConfigOption(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestConfigOption represents the configurations of a manifest defined in workload field.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"resourceIdentifier": {
						SchemaProps: spec.SchemaProps{
							Description: "ResourceIdentifier represents the group, resource, name and namespace of a resoure. iff this refers to a resource not created by this manifest work, the related rules will not be executed.",
							Default:     map[string]interface{}{},
							Ref:         ref("open-cluster-management.io/api/work/v1.ResourceIdentifier"),
						},
					},
					"feedbackRules": {
						SchemaProps: spec.SchemaProps{
							Description: "FeedbackRules defines what resource status field should be returned. If it is not set or empty, no feedback rules will be honored.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("open-cluster-management.io/api/work/v1.FeedbackRule"),
									},
								},
							},
						},
					},
					"updateStrategy": {
						SchemaProps: spec.SchemaProps{
							Description: "UpdateStrategy defines the strategy to update this manifest. UpdateStrategy is Update if it is not set, optional",
							Ref:         ref("open-cluster-management.io/api/work/v1.UpdateStrategy"),
						},
					},
				},
				Required: []string{"resourceIdentifier", "updateStrategy"},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.FeedbackRule", "open-cluster-management.io/api/work/v1.ResourceIdentifier", "open-cluster-management.io/api/work/v1.UpdateStrategy"},
	}
}

func schema_open_cluster_managementio_api_work_v1_ManifestResourceMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestResourceMeta represents the group, version, kind, as well as the group, version, resource, name and namespace of a resoure.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ordinal": {
						SchemaProps: spec.SchemaProps{
							Description: "Ordinal represents the index of the manifest on spec.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "Group is the API Group of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the version of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is the kind of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource is the resource name of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the namespace of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"ordinal"},
			},
		},
	}
}

func schema_open_cluster_managementio_api_work_v1_ManifestResourceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestResourceStatus represents the status of each resource in manifest work deployed on managed cluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"manifests": {
						SchemaProps: spec.SchemaProps{
							Description: "Manifests represents the condition of manifests deployed on managed cluster. Valid condition types are: 1. Progressing represents the resource is being applied on managed cluster. 2. Applied represents the resource is applied successfully on managed cluster. 3. Available represents the resource exists on the managed cluster. 4. Degraded represents the current state of resource does not match the desired state for a certain period.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("open-cluster-management.io/api/work/v1.ManifestCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.ManifestCondition"},
	}
}

func schema_open_cluster_managementio_api_work_v1_ManifestWork(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestWork represents a manifests workload that hub wants to deploy on the managed cluster. A manifest workload is defined as a set of Kubernetes resources. ManifestWork must be created in the cluster namespace on the hub, so that agent on the corresponding managed cluster can access this resource and deploy on the managed cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec represents a desired configuration of work to be deployed on the managed cluster.",
							Default:     map[string]interface{}{},
							Ref:         ref("open-cluster-management.io/api/work/v1.ManifestWorkSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status represents the current status of work.",
							Default:     map[string]interface{}{},
							Ref:         ref("open-cluster-management.io/api/work/v1.ManifestWorkStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "open-cluster-management.io/api/work/v1.ManifestWorkSpec", "open-cluster-management.io/api/work/v1.ManifestWorkStatus"},
	}
}

func schema_open_cluster_managementio_api_work_v1_ManifestWorkExecutor(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestWorkExecutor is the executor that applies the resources to the managed cluster. i.e. the work agent.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"subject": {
						SchemaProps: spec.SchemaProps{
							Description: "Subject is the subject identity which the work agent uses to talk to the local cluster when applying the resources.",
							Default:     map[string]interface{}{},
							Ref:         ref("open-cluster-management.io/api/work/v1.ManifestWorkExecutorSubject"),
						},
					},
				},
				Required: []string{"subject"},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.ManifestWorkExecutorSubject"},
	}
}

func schema_open_cluster_managementio_api_work_v1_ManifestWorkExecutorSubject(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestWorkExecutorSubject is the subject identity used by the work agent to apply the resources. The work agent should check whether the applying resources are out-of-scope of the permission held by the executor identity.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is the type of the subject identity. Supported types are: \"ServiceAccount\".",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccount is for identifying which service account to use by the work agent. Only required if the type is \"ServiceAccount\".",
							Ref:         ref("open-cluster-management.io/api/work/v1.ManifestWorkSubjectServiceAccount"),
						},
					},
				},
				Required: []string{"type"},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.ManifestWorkSubjectServiceAccount"},
	}
}

func schema_open_cluster_managementio_api_work_v1_ManifestWorkList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestWorkList is a collection of manifestworks.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is a list of manifestworks.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("open-cluster-management.io/api/work/v1.ManifestWork"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "open-cluster-management.io/api/work/v1.ManifestWork"},
	}
}

func schema_open_cluster_managementio_api_work_v1_ManifestWorkSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestWorkSpec represents a desired configuration of manifests to be deployed on the managed cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"workload": {
						SchemaProps: spec.SchemaProps{
							Description: "Workload represents the manifest workload to be deployed on a managed cluster.",
							Default:     map[string]interface{}{},
							Ref:         ref("open-cluster-management.io/api/work/v1.ManifestsTemplate"),
						},
					},
					"deleteOption": {
						SchemaProps: spec.SchemaProps{
							Description: "DeleteOption represents deletion strategy when the manifestwork is deleted. Foreground deletion strategy is applied to all the resource in this manifestwork if it is not set.",
							Ref:         ref("open-cluster-management.io/api/work/v1.DeleteOption"),
						},
					},
					"manifestConfigs": {
						SchemaProps: spec.SchemaProps{
							Description: "ManifestConfigs represents the configurations of manifests defined in workload field.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("open-cluster-management.io/api/work/v1.ManifestConfigOption"),
									},
								},
							},
						},
					},
					"executor": {
						SchemaProps: spec.SchemaProps{
							Description: "Executor is the configuration that makes the work agent to perform some pre-request processing/checking. e.g. the executor identity tells the work agent to check the executor has sufficient permission to write the workloads to the local managed cluster. Note that nil executor is still supported for backward-compatibility which indicates that the work agent will not perform any additional actions before applying resources.",
							Ref:         ref("open-cluster-management.io/api/work/v1.ManifestWorkExecutor"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.DeleteOption", "open-cluster-management.io/api/work/v1.ManifestConfigOption", "open-cluster-management.io/api/work/v1.ManifestWorkExecutor", "open-cluster-management.io/api/work/v1.ManifestsTemplate"},
	}
}

func schema_open_cluster_managementio_api_work_v1_ManifestWorkStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestWorkStatus represents the current status of managed cluster ManifestWork.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions contains the different condition statuses for this work. Valid condition types are: 1. Applied represents workload in ManifestWork is applied successfully on managed cluster. 2. Progressing represents workload in ManifestWork is being applied on managed cluster. 3. Available represents workload in ManifestWork exists on the managed cluster. 4. Degraded represents the current state of workload does not match the desired state for a certain period.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.Condition"),
									},
								},
							},
						},
					},
					"resourceStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "ResourceStatus represents the status of each resource in manifestwork deployed on a managed cluster. The Klusterlet agent on managed cluster syncs the condition from the managed cluster to the hub.",
							Default:     map[string]interface{}{},
							Ref:         ref("open-cluster-management.io/api/work/v1.ManifestResourceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Condition", "open-cluster-management.io/api/work/v1.ManifestResourceStatus"},
	}
}

func schema_open_cluster_managementio_api_work_v1_ManifestWorkSubjectServiceAccount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestWorkSubjectServiceAccount references service account in the managed clusters.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace is the namespace of the service account.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the service account.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"namespace", "name"},
			},
		},
	}
}

func schema_open_cluster_managementio_api_work_v1_ManifestsTemplate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManifestsTemplate represents the manifest workload to be deployed on a managed cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"manifests": {
						SchemaProps: spec.SchemaProps{
							Description: "Manifests represents a list of kuberenetes resources to be deployed on a managed cluster.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("open-cluster-management.io/api/work/v1.Manifest"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.Manifest"},
	}
}

func schema_open_cluster_managementio_api_work_v1_OrphaningRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OrphaningRule identifies a single resource included in this manifestwork to be orphaned",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "Group is the API Group of the Kubernetes resource, empty string indicates it is in core group.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource is the resource name of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the namespace of the Kubernetes resource, empty string indicates it is a cluster scoped resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"resource", "name"},
			},
		},
	}
}

func schema_open_cluster_managementio_api_work_v1_ResourceIdentifier(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ResourceIdentifier identifies a single resource included in this manifestwork",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "Group is the API Group of the Kubernetes resource, empty string indicates it is in core group.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Description: "Resource is the resource name of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the Kubernetes resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the namespace of the Kubernetes resource, empty string indicates it is a cluster scoped resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"resource", "name"},
			},
		},
	}
}

func schema_open_cluster_managementio_api_work_v1_SelectivelyOrphan(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SelectivelyOrphan represents a list of resources following orphan deletion stratecy",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"orphaningRules": {
						SchemaProps: spec.SchemaProps{
							Description: "orphaningRules defines a slice of orphaningrule. Each orphaningrule identifies a single resource included in this manifestwork",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("open-cluster-management.io/api/work/v1.OrphaningRule"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.OrphaningRule"},
	}
}

func schema_open_cluster_managementio_api_work_v1_ServerSideApplyConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"force": {
						SchemaProps: spec.SchemaProps{
							Description: "Force represents to force apply the manifest.",
							Default:     false,
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"fieldManager": {
						SchemaProps: spec.SchemaProps{
							Description: "FieldManager is the manager to apply the resource. It is work-agent by default, but can be other name with work-agent as the prefix.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_open_cluster_managementio_api_work_v1_StatusFeedbackResult(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StatusFeedbackResult represents the values of the feild synced back defined in statusFeedbacks",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"values": {
						SchemaProps: spec.SchemaProps{
							Description: "Values represents the synced value of the interested field.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("open-cluster-management.io/api/work/v1.FeedbackValue"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.FeedbackValue"},
	}
}

func schema_open_cluster_managementio_api_work_v1_UpdateStrategy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UpdateStrategy defines the strategy to update this manifest",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "type defines the strategy to update this manifest, default value is Update. Update type means to update resource by an update call. CreateOnly type means do not update resource based on current manifest. ServerSideApply type means to update resource using server side apply with work-controller as the field manager. If there is conflict, the related Applied condition of manifest will be in the status of False with the reason of ApplyConflict.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serverSideApply": {
						SchemaProps: spec.SchemaProps{
							Description: "serverSideApply defines the configuration for server side apply. It is honored only when type of updateStrategy is ServerSideApply",
							Ref:         ref("open-cluster-management.io/api/work/v1.ServerSideApplyConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"open-cluster-management.io/api/work/v1.ServerSideApplyConfig"},
	}
}
